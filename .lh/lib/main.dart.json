{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1693664131091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1693664817057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n         useMaterial3: true,\r\n       ),\r\n       home: LayoutBuilder(\r\n         builder: (BuildContext context, BoxConstraints constraints) {\r\n-          final double normalTextSize = constraints.maxHeight * 0.045;\r\n-          final double highlightTextSize = constraints.maxHeight * 0.20;\r\n-          final double spacingTextSize = constraints.maxHeight * 0.035;\r\n+          double normalTextSize = constraints.maxHeight * 0.045;\r\n+          double highlightTextSize = constraints.maxHeight * 0.20;\r\n+          double spacingTextSize = constraints.maxHeight * 0.035;\r\n \r\n           return KeyboardListener(\r\n             autofocus: true,\r\n             focusNode: focusNode,\r\n@@ -269,9 +269,9 @@\n                                                       active.contains(LogicalKeyboardKey.altRight),\r\n                                                   icon: \"‚å•\",\r\n                                                 ),\r\n                                               ],\r\n-                                            )\r\n+                                            ),\r\n                                           ],\r\n                                         ),\r\n                                       ),\r\n                                     ),\r\n@@ -358,63 +358,59 @@\n         .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n   }\r\n \r\n   @override\r\n-  Widget build(BuildContext context) {\r\n-    return MouseRegion(\r\n-      onEnter: (_) => setState(() {\r\n-        _controller.forward();\r\n-      }),\r\n-      onExit: (_) => setState(() {\r\n-        _controller.reverse();\r\n-      }),\r\n-      child: AnimatedBuilder(\r\n-        animation: _controller,\r\n-        builder: (BuildContext context, Widget? child) {\r\n-          return Transform.scale(scale: _scale.value, child: child);\r\n-        },\r\n-        child: Container(\r\n-          width: 225,\r\n-          height: 256,\r\n-          decoration: const BoxDecoration(\r\n-            borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n-            color: Colors.black,\r\n-          ),\r\n-          child: Column(\r\n-            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-            children: <Widget>[\r\n-              Container(\r\n-                padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n-                color: Colors.blue,\r\n-                child: Center(\r\n-                  child: Text(\r\n-                    widget.title,\r\n-                    style: const TextStyle(\r\n-                      color: Colors.white,\r\n-                      fontWeight: FontWeight.w500,\r\n+  Widget build(BuildContext context) => MouseRegion(\r\n+        onEnter: (_) => setState(() {\r\n+_controller.forward();\r\n+        }),\r\n+        onExit: (_) => setState(() {\r\n+          _controller.reverse();\r\n+        }),\r\n+        child: AnimatedBuilder(\r\n+          animation: _controller,\r\n+          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n+          child: Container(\r\n+            width: 225,\r\n+            height: 256,\r\n+            decoration: const BoxDecoration(\r\n+              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n+              color: Colors.black,\r\n+            ),\r\n+            child: Column(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: <Widget>[\r\n+                Container(\r\n+                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n+                  color: Colors.blue,\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      widget.title,\r\n+                      style: const TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontWeight: FontWeight.w500,\r\n+                      ),\r\n                     ),\r\n                   ),\r\n                 ),\r\n-              ),\r\n-              Expanded(\r\n-                child: ColoredBox(\r\n-                  color: Colors.white,\r\n-                  child: Center(child: widget.child),\r\n+                Expanded(\r\n+                  child: ColoredBox(\r\n+                    color: Colors.white,\r\n+                    child: Center(child: widget.child),\r\n+                  ),\r\n                 ),\r\n-              ),\r\n-              if (widget.description != null)\r\n-                Container(\r\n-                  constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n-                  padding: const EdgeInsets.all(8.0),\r\n-                  color: Colors.grey[200],\r\n-                  child: Text(widget.description!, overflow: TextOverflow.fade),\r\n-                ),\r\n-            ],\r\n+                if (widget.description != null)\r\n+                  Container(\r\n+                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    color: Colors.grey[200],\r\n+                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n+                  ),\r\n+              ],\r\n+            ),\r\n           ),\r\n         ),\r\n-      ),\r\n-    );\r\n-  }\r\n+      );\r\n }\r\n \r\n class ModifierSquare extends StatelessWidget {\r\n   const ModifierSquare({\r\n@@ -426,27 +422,25 @@\n   final bool isActivated;\r\n   final String icon;\r\n \r\n   @override\r\n-  Widget build(BuildContext context) {\r\n-    return Container(\r\n-      width: 64,\r\n-      height: 64,\r\n-      decoration: BoxDecoration(\r\n-        border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n-        borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n-      ),\r\n-      child: Center(\r\n-        child: Text(\r\n-          icon,\r\n-          style: TextStyle(\r\n-            color: isActivated ? Colors.black : Colors.grey[200],\r\n-            fontSize: 36,\r\n+  Widget build(BuildContext context) => Container(\r\n+        width: 64,\r\n+        height: 64,\r\n+        decoration: BoxDecoration(\r\n+          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n+          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n+        ),\r\n+        child: Center(\r\n+          child: Text(\r\n+            icon,\r\n+            style: TextStyle(\r\n+              color: isActivated ? Colors.black : Colors.grey[200],\r\n+              fontSize: 36,\r\n+            ),\r\n           ),\r\n         ),\r\n-      ),\r\n-    );\r\n-  }\r\n+      );\r\n }\r\n \r\n class ClipboardMessage extends StatefulWidget {\r\n   const ClipboardMessage({required this.animationCallback, super.key});\r\n@@ -471,23 +465,21 @@\n           widget.animationCallback();\r\n         }\r\n       });\r\n     _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n-        .drive(TweenSequence<double>(<TweenSequenceItem<double>>[\r\n-      TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n-      TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n-      TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n-    ]));\r\n+        .drive(\r\n+      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n+      ]),\r\n+    );\r\n     _animationController.forward();\r\n   }\r\n \r\n   @override\r\n-  Widget build(BuildContext context) {\r\n-    return AnimatedBuilder(\r\n-      animation: _animationController,\r\n-      builder: (BuildContext context, Widget? child) {\r\n-        return Opacity(opacity: _opacity.value, child: child);\r\n-      },\r\n-      child: const Text(\"Copied to clipboard!\"),\r\n-    );\r\n-  }\r\n+  Widget build(BuildContext context) => AnimatedBuilder(\r\n+        animation: _animationController,\r\n+        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n+        child: const Text(\"Copied to clipboard!\"),\r\n+      );\r\n }\r\n"
                },
                {
                    "date": 1693664914521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,479 @@\n+import \"dart:async\";\r\n+import \"dart:io\";\r\n+\r\n+import \"package:flutter/foundation.dart\";\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:flutter/services.dart\";\r\n+import \"package:window_manager/window_manager.dart\";\r\n+\r\n+void main() async {\r\n+  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n+    WidgetsFlutterBinding.ensureInitialized();\r\n+    await windowManager.ensureInitialized();\r\n+\r\n+    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n+    // await WindowManager.instance.setSize(const Size(400, 650));\r\n+  }\r\n+  runApp(const MainApp());\r\n+}\r\n+\r\n+class MainApp extends StatefulWidget {\r\n+  const MainApp({super.key});\r\n+\r\n+  @override\r\n+  State<MainApp> createState() => _MainAppState();\r\n+}\r\n+\r\n+class _MainAppState extends State<MainApp> {\r\n+  late final FocusNode focusNode;\r\n+  late final Set<LogicalKeyboardKey> active;\r\n+\r\n+  late bool hasCopied;\r\n+  late (double, double) mousePosition;\r\n+  KeyEvent? lastKeyEvent;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    hasCopied = false;\r\n+    mousePosition = (0.0, 0.0);\r\n+    focusNode = new FocusNode();\r\n+    active = <LogicalKeyboardKey>{};\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n+\r\n+    return MaterialApp(\r\n+      theme: ThemeData(\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: LayoutBuilder(\r\n+        builder: (BuildContext context, BoxConstraints constraints) {\r\n+          double normalTextSize = constraints.maxHeight * 0.045;\r\n+          double highlightTextSize = constraints.maxHeight * 0.20;\r\n+          double spacingTextSize = constraints.maxHeight * 0.035;\r\n+\r\n+          return KeyboardListener(\r\n+            autofocus: true,\r\n+            focusNode: focusNode,\r\n+            onKeyEvent: (KeyEvent event) {\r\n+              if (event case KeyUpEvent()) {\r\n+                setState(() {\r\n+                  active.remove(event.logicalKey);\r\n+                });\r\n+              } else if (event case KeyDownEvent()) {\r\n+                setState(() {\r\n+                  active.add(event.logicalKey);\r\n+                  this.lastKeyEvent = event;\r\n+                });\r\n+              }\r\n+            },\r\n+            child: Scaffold(\r\n+              body: MouseRegion(\r\n+                onHover: (PointerHoverEvent event) {\r\n+                  setState(() {\r\n+                    mousePosition = (event.position.dx, event.position.dy);\r\n+                  });\r\n+                },\r\n+                child: Stack(\r\n+                  children: <Widget>[\r\n+                    SingleChildScrollView(\r\n+                      child: Container(\r\n+                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n+                        child: SingleChildScrollView(\r\n+                          child: Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+                            children: <Widget>[\r\n+                              if (lastKeyEvent != null) ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      RichText(\r\n+                                        text: TextSpan(\r\n+                                          children: <InlineSpan>[\r\n+                                            TextSpan(\r\n+                                              text: \"Flutter Key Code\",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \"(logicalKey.keyId)\",\r\n+                                              style: TextStyle(\r\n+                                                fontFamily: \"Consolas\",\r\n+                                                color: Colors.grey,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                      MouseRegion(\r\n+                                        cursor: SystemMouseCursors.click,\r\n+                                        child: GestureDetector(\r\n+                                          onTap: () {\r\n+                                            unawaited(\r\n+                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n+                                                  .then((_) => setState(() => hasCopied = true)),\r\n+                                            );\r\n+                                          },\r\n+                                          child: Text(\r\n+                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                            style: TextStyle(fontSize: highlightTextSize),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                                      Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(fontSize: normalTextSize),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Center(\r\n+                                  child: Text(\r\n+                                    \"Keycode Information\",\r\n+                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Wrap(\r\n+                                  alignment: WrapAlignment.center,\r\n+                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n+                                  spacing: 16.0,\r\n+                                  runSpacing: 16.0,\r\n+                                  runAlignment: WrapAlignment.center,\r\n+                                  children: <Widget>[\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyId\",\r\n+                                      description:\r\n+                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.debugName\",\r\n+                                      description:\r\n+                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.isAutogenerated\",\r\n+                                      description:\r\n+                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyLabel\",\r\n+                                      description:\r\n+                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n+                                      child: Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"physicalKey.usbHidUsage\",\r\n+                                      description:\r\n+                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"Modifiers\",\r\n+                                      child: Center(\r\n+                                        child: Column(\r\n+                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                          children: <Widget>[\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n+                                                  icon: \"‚áß\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.control),\r\n+                                                  icon: \"^\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n+                                                  icon: \"‚åò\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altRight),\r\n+                                                  icon: \"‚å•\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ] else ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      Text(\r\n+                                        \"Flutter Key Code\",\r\n+                                        style: TextStyle(\r\n+                                          color: Colors.black,\r\n+                                          fontSize: normalTextSize,\r\n+                                        ),\r\n+                                      ),\r\n+                                      SizedBox(height: spacingTextSize),\r\n+                                      Container(\r\n+                                        width: constraints.maxWidth * 0.45,\r\n+                                        height: constraints.maxHeight * 0.45,\r\n+                                        decoration: BoxDecoration(\r\n+                                          border: Border.all(color: Colors.grey[400]!),\r\n+                                          borderRadius: BorderRadius.circular(8.0),\r\n+                                        ),\r\n+                                        child: const Center(\r\n+                                          child: Text(\"Press a key on the keyboard!\"),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                              ],\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                    if (hasCopied)\r\n+                      Positioned(\r\n+                        left: mousePosition.$1 + 16,\r\n+                        top: mousePosition.$2 + 8,\r\n+                        child: ClipboardMessage(\r\n+                          animationCallback: () => setState(() => hasCopied = false),\r\n+                        ),\r\n+                      ),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class Tile extends StatefulWidget {\r\n+  const Tile({\r\n+    required this.title,\r\n+    required this.child,\r\n+    this.description,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final String title;\r\n+  final Widget child;\r\n+  final String? description;\r\n+\r\n+  @override\r\n+  State<Tile> createState() => _TileState();\r\n+}\r\n+\r\n+class _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n+  late Animation<double> _scale;\r\n+  late final AnimationController _controller;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n+    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n+        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => MouseRegion(\r\n+        onEnter: (_) => _controller.forward(),\r\n+        onExit: (_) => _controller.reverse(),\r\n+        child: AnimatedBuilder(\r\n+          animation: _controller,\r\n+          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n+          child: Container(\r\n+            width: 225,\r\n+            height: 256,\r\n+            decoration: const BoxDecoration(\r\n+              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n+              color: Colors.black,\r\n+            ),\r\n+            child: Column(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: <Widget>[\r\n+                Container(\r\n+                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n+                  color: Colors.blue,\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      widget.title,\r\n+                      style: const TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontWeight: FontWeight.w500,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                Expanded(\r\n+                  child: ColoredBox(\r\n+                    color: Colors.white,\r\n+                    child: Center(child: widget.child),\r\n+                  ),\r\n+                ),\r\n+                if (widget.description != null)\r\n+                  Container(\r\n+                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    color: Colors.grey[200],\r\n+                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n+                  ),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ModifierSquare extends StatelessWidget {\r\n+  const ModifierSquare({\r\n+    required this.isActivated,\r\n+    required this.icon,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final bool isActivated;\r\n+  final String icon;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => Container(\r\n+        width: 64,\r\n+        height: 64,\r\n+        decoration: BoxDecoration(\r\n+          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n+          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n+        ),\r\n+        child: Center(\r\n+          child: Text(\r\n+            icon,\r\n+            style: TextStyle(\r\n+              color: isActivated ? Colors.black : Colors.grey[200],\r\n+              fontSize: 36,\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ClipboardMessage extends StatefulWidget {\r\n+  const ClipboardMessage({required this.animationCallback, super.key});\r\n+\r\n+  final void Function() animationCallback;\r\n+\r\n+  @override\r\n+  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n+}\r\n+\r\n+class _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n+  late final AnimationController _animationController;\r\n+  late final Animation<double> _opacity;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n+      ..addStatusListener((AnimationStatus status) {\r\n+        if (status case AnimationStatus.completed) {\r\n+          widget.animationCallback();\r\n+        }\r\n+      });\r\n+    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n+        .drive(\r\n+      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n+      ]),\r\n+    );\r\n+    _animationController.forward();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => AnimatedBuilder(\r\n+        animation: _animationController,\r\n+        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n+        child: const Text(\"Copied to clipboard!\"),\r\n+      );\r\n+}\r\n"
                },
                {
                    "date": 1693664954238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,479 @@\n+import \"dart:async\";\r\n+import \"dart:io\";\r\n+\r\n+import \"package:flutter/foundation.dart\";\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:flutter/services.dart\";\r\n+import \"package:window_manager/window_manager.dart\";\r\n+\r\n+void main() async {\r\n+  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n+    WidgetsFlutterBinding.ensureInitialized();\r\n+    await windowManager.ensureInitialized();\r\n+\r\n+    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n+    // await WindowManager.instance.setSize(const Size(400, 650));\r\n+  }\r\n+  runApp(const MainApp());\r\n+}\r\n+\r\n+class MainApp extends StatefulWidget {\r\n+  const MainApp({super.key});\r\n+\r\n+  @override\r\n+  State<MainApp> createState() => _MainAppState();\r\n+}\r\n+\r\n+class _MainAppState extends State<MainApp> {\r\n+  late final FocusNode focusNode;\r\n+  late final Set<LogicalKeyboardKey> active;\r\n+\r\n+  late bool hasCopied;\r\n+  late (double, double) mousePosition;\r\n+  KeyEvent? lastKeyEvent;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    hasCopied = false;\r\n+    mousePosition = (0.0, 0.0);\r\n+    focusNode = new FocusNode();\r\n+    active = <LogicalKeyboardKey>{};\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n+\r\n+    return MaterialApp(\r\n+      theme: ThemeData(\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: LayoutBuilder(\r\n+        builder: (BuildContext context, BoxConstraints constraints) {\r\n+          double normalTextSize = constraints.maxHeight * 0.045;\r\n+          double highlightTextSize = constraints.maxHeight * 0.20;\r\n+          double spacingTextSize = constraints.maxHeight * 0.035;\r\n+\r\n+          return KeyboardListener(\r\n+            autofocus: true,\r\n+            focusNode: focusNode,\r\n+            onKeyEvent: (KeyEvent event) {\r\n+              if (event case KeyUpEvent()) {\r\n+                setState(() {\r\n+                  active.remove(event.logicalKey);\r\n+                });\r\n+              } else if (event case KeyDownEvent()) {\r\n+                setState(() {\r\n+                  active.add(event.logicalKey);\r\n+                  this.lastKeyEvent = event;\r\n+                });\r\n+              }\r\n+            },\r\n+            child: Scaffold(\r\n+              body: MouseRegion(\r\n+                onHover: (PointerHoverEvent event) {\r\n+                  setState(() {\r\n+                    mousePosition = (event.position.dx, event.position.dy);\r\n+                  });\r\n+                },\r\n+                child: Stack(\r\n+                  children: <Widget>[\r\n+                    SingleChildScrollView(\r\n+                      child: Container(\r\n+                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n+                        child: SingleChildScrollView(\r\n+                          child: Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+                            children: <Widget>[\r\n+                              if (lastKeyEvent != null) ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      RichText(\r\n+                                        text: TextSpan(\r\n+                                          children: <InlineSpan>[\r\n+                                            TextSpan(\r\n+                                              text: \"Flutter Key Code\",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \"(logicalKey.keyId)\",\r\n+                                              style: TextStyle(\r\n+                                                fontFamily: \"Consolas\",\r\n+                                                color: Colors.grey,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                      MouseRegion(\r\n+                                        cursor: SystemMouseCursors.click,\r\n+                                        child: GestureDetector(\r\n+                                          onTap: () {\r\n+                                            unawaited(\r\n+                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n+                                                  .then((_) => setState(() => hasCopied = true)),\r\n+                                            );\r\n+                                          },\r\n+                                          child: Text(\r\n+                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                            style: TextStyle(fontSize: highlightTextSize),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                                      Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(fontSize: normalTextSize),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Center(\r\n+                                  child: Text(\r\n+                                    \"Keycode Information\",\r\n+                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Wrap(\r\n+                                  alignment: WrapAlignment.center,\r\n+                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n+                                  spacing: 16.0,\r\n+                                  runSpacing: 16.0,\r\n+                                  runAlignment: WrapAlignment.center,\r\n+                                  children: <Widget>[\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyId\",\r\n+                                      description:\r\n+                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.debugName\",\r\n+                                      description:\r\n+                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.isAutogenerated\",\r\n+                                      description:\r\n+                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyLabel\",\r\n+                                      description:\r\n+                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n+                                      child: Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"physicalKey.usbHidUsage\",\r\n+                                      description:\r\n+                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"Modifiers\",\r\n+                                      child: Center(\r\n+                                        child: Column(\r\n+                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                          children: <Widget>[\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n+                                                  icon: \"‚áß\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.control),\r\n+                                                  icon: \"^\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated:  active.contains(LogicalKeyboardKey.meta) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n+                                                  icon: \"‚åò\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altRight),\r\n+                                                  icon: \"‚å•\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ] else ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      Text(\r\n+                                        \"Flutter Key Code\",\r\n+                                        style: TextStyle(\r\n+                                          color: Colors.black,\r\n+                                          fontSize: normalTextSize,\r\n+                                        ),\r\n+                                      ),\r\n+                                      SizedBox(height: spacingTextSize),\r\n+                                      Container(\r\n+                                        width: constraints.maxWidth * 0.45,\r\n+                                        height: constraints.maxHeight * 0.45,\r\n+                                        decoration: BoxDecoration(\r\n+                                          border: Border.all(color: Colors.grey[400]!),\r\n+                                          borderRadius: BorderRadius.circular(8.0),\r\n+                                        ),\r\n+                                        child: const Center(\r\n+                                          child: Text(\"Press a key on the keyboard!\"),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                              ],\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                    if (hasCopied)\r\n+                      Positioned(\r\n+                        left: mousePosition.$1 + 16,\r\n+                        top: mousePosition.$2 + 8,\r\n+                        child: ClipboardMessage(\r\n+                          animationCallback: () => setState(() => hasCopied = false),\r\n+                        ),\r\n+                      ),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class Tile extends StatefulWidget {\r\n+  const Tile({\r\n+    required this.title,\r\n+    required this.child,\r\n+    this.description,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final String title;\r\n+  final Widget child;\r\n+  final String? description;\r\n+\r\n+  @override\r\n+  State<Tile> createState() => _TileState();\r\n+}\r\n+\r\n+class _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n+  late Animation<double> _scale;\r\n+  late final AnimationController _controller;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n+    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n+        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => MouseRegion(\r\n+        onEnter: (_) => _controller.forward(),\r\n+        onExit: (_) => _controller.reverse(),\r\n+        child: AnimatedBuilder(\r\n+          animation: _controller,\r\n+          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n+          child: Container(\r\n+            width: 225,\r\n+            height: 256,\r\n+            decoration: const BoxDecoration(\r\n+              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n+              color: Colors.black,\r\n+            ),\r\n+            child: Column(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: <Widget>[\r\n+                Container(\r\n+                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n+                  color: Colors.blue,\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      widget.title,\r\n+                      style: const TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontWeight: FontWeight.w500,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                Expanded(\r\n+                  child: ColoredBox(\r\n+                    color: Colors.white,\r\n+                    child: Center(child: widget.child),\r\n+                  ),\r\n+                ),\r\n+                if (widget.description != null)\r\n+                  Container(\r\n+                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    color: Colors.grey[200],\r\n+                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n+                  ),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ModifierSquare extends StatelessWidget {\r\n+  const ModifierSquare({\r\n+    required this.isActivated,\r\n+    required this.icon,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final bool isActivated;\r\n+  final String icon;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => Container(\r\n+        width: 64,\r\n+        height: 64,\r\n+        decoration: BoxDecoration(\r\n+          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n+          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n+        ),\r\n+        child: Center(\r\n+          child: Text(\r\n+            icon,\r\n+            style: TextStyle(\r\n+              color: isActivated ? Colors.black : Colors.grey[200],\r\n+              fontSize: 36,\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ClipboardMessage extends StatefulWidget {\r\n+  const ClipboardMessage({required this.animationCallback, super.key});\r\n+\r\n+  final void Function() animationCallback;\r\n+\r\n+  @override\r\n+  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n+}\r\n+\r\n+class _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n+  late final AnimationController _animationController;\r\n+  late final Animation<double> _opacity;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n+      ..addStatusListener((AnimationStatus status) {\r\n+        if (status case AnimationStatus.completed) {\r\n+          widget.animationCallback();\r\n+        }\r\n+      });\r\n+    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n+        .drive(\r\n+      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n+      ]),\r\n+    );\r\n+    _animationController.forward();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => AnimatedBuilder(\r\n+        animation: _animationController,\r\n+        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n+        child: const Text(\"Copied to clipboard!\"),\r\n+      );\r\n+}\r\n"
                },
                {
                    "date": 1693664996310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,11 +255,13 @@\n                                             Row(\r\n                                               mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                                               children: <Widget>[\r\n                                                 ModifierSquare(\r\n-                                                  isActivated:  active.contains(LogicalKeyboardKey.meta) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n+                                                  isActivated: <LogicalKeyboardKey>{\r\n+                                                    LogicalKeyboardKey.meta,\r\n+                                                    LogicalKeyboardKey.metaLeft,\r\n+                                                    LogicalKeyboardKey.metaRight,\r\n+                                                  }.any(active.contains),\r\n                                                   icon: \"‚åò\",\r\n                                                 ),\r\n                                                 ModifierSquare(\r\n                                                   isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n@@ -476,968 +478,4 @@\n         builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n         child: const Text(\"Copied to clipboard!\"),\r\n       );\r\n }\r\n-import \"dart:async\";\r\n-import \"dart:io\";\r\n-\r\n-import \"package:flutter/foundation.dart\";\r\n-import \"package:flutter/material.dart\";\r\n-import \"package:flutter/services.dart\";\r\n-import \"package:window_manager/window_manager.dart\";\r\n-\r\n-void main() async {\r\n-  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n-    WidgetsFlutterBinding.ensureInitialized();\r\n-    await windowManager.ensureInitialized();\r\n-\r\n-    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n-    // await WindowManager.instance.setSize(const Size(400, 650));\r\n-  }\r\n-  runApp(const MainApp());\r\n-}\r\n-\r\n-class MainApp extends StatefulWidget {\r\n-  const MainApp({super.key});\r\n-\r\n-  @override\r\n-  State<MainApp> createState() => _MainAppState();\r\n-}\r\n-\r\n-class _MainAppState extends State<MainApp> {\r\n-  late final FocusNode focusNode;\r\n-  late final Set<LogicalKeyboardKey> active;\r\n-\r\n-  late bool hasCopied;\r\n-  late (double, double) mousePosition;\r\n-  KeyEvent? lastKeyEvent;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    hasCopied = false;\r\n-    mousePosition = (0.0, 0.0);\r\n-    focusNode = new FocusNode();\r\n-    active = <LogicalKeyboardKey>{};\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n-\r\n-    return MaterialApp(\r\n-      theme: ThemeData(\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: LayoutBuilder(\r\n-        builder: (BuildContext context, BoxConstraints constraints) {\r\n-          double normalTextSize = constraints.maxHeight * 0.045;\r\n-          double highlightTextSize = constraints.maxHeight * 0.20;\r\n-          double spacingTextSize = constraints.maxHeight * 0.035;\r\n-\r\n-          return KeyboardListener(\r\n-            autofocus: true,\r\n-            focusNode: focusNode,\r\n-            onKeyEvent: (KeyEvent event) {\r\n-              if (event case KeyUpEvent()) {\r\n-                setState(() {\r\n-                  active.remove(event.logicalKey);\r\n-                });\r\n-              } else if (event case KeyDownEvent()) {\r\n-                setState(() {\r\n-                  active.add(event.logicalKey);\r\n-                  this.lastKeyEvent = event;\r\n-                });\r\n-              }\r\n-            },\r\n-            child: Scaffold(\r\n-              body: MouseRegion(\r\n-                onHover: (PointerHoverEvent event) {\r\n-                  setState(() {\r\n-                    mousePosition = (event.position.dx, event.position.dy);\r\n-                  });\r\n-                },\r\n-                child: Stack(\r\n-                  children: <Widget>[\r\n-                    SingleChildScrollView(\r\n-                      child: Container(\r\n-                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n-                        child: SingleChildScrollView(\r\n-                          child: Column(\r\n-                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-                            children: <Widget>[\r\n-                              if (lastKeyEvent != null) ...<Widget>[\r\n-                                FittedBox(\r\n-                                  fit: BoxFit.scaleDown,\r\n-                                  child: Column(\r\n-                                    children: <Widget>[\r\n-                                      RichText(\r\n-                                        text: TextSpan(\r\n-                                          children: <InlineSpan>[\r\n-                                            TextSpan(\r\n-                                              text: \"Flutter Key Code\",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \" \",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \"(logicalKey.keyId)\",\r\n-                                              style: TextStyle(\r\n-                                                fontFamily: \"Consolas\",\r\n-                                                color: Colors.grey,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \" \",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                      MouseRegion(\r\n-                                        cursor: SystemMouseCursors.click,\r\n-                                        child: GestureDetector(\r\n-                                          onTap: () {\r\n-                                            unawaited(\r\n-                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n-                                                  .then((_) => setState(() => hasCopied = true)),\r\n-                                            );\r\n-                                          },\r\n-                                          child: Text(\r\n-                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n-                                            style: TextStyle(fontSize: highlightTextSize),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                                      Text(\r\n-                                        lastKeyEvent.logicalKey.keyLabel,\r\n-                                        style: TextStyle(fontSize: normalTextSize),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                                SizedBox(height: spacingTextSize),\r\n-                                Center(\r\n-                                  child: Text(\r\n-                                    \"Keycode Information\",\r\n-                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n-                                  ),\r\n-                                ),\r\n-                                SizedBox(height: spacingTextSize),\r\n-                                Wrap(\r\n-                                  alignment: WrapAlignment.center,\r\n-                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n-                                  spacing: 16.0,\r\n-                                  runSpacing: 16.0,\r\n-                                  runAlignment: WrapAlignment.center,\r\n-                                  children: <Widget>[\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.keyId\",\r\n-                                      description:\r\n-                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.debugName\",\r\n-                                      description:\r\n-                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.isAutogenerated\",\r\n-                                      description:\r\n-                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.keyLabel\",\r\n-                                      description:\r\n-                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n-                                      child: Text(\r\n-                                        lastKeyEvent.logicalKey.keyLabel,\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"physicalKey.usbHidUsage\",\r\n-                                      description:\r\n-                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"Modifiers\",\r\n-                                      child: Center(\r\n-                                        child: Column(\r\n-                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                          children: <Widget>[\r\n-                                            Row(\r\n-                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                              children: <Widget>[\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n-                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n-                                                  icon: \"‚áß\",\r\n-                                                ),\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.control),\r\n-                                                  icon: \"^\",\r\n-                                                ),\r\n-                                              ],\r\n-                                            ),\r\n-                                            Row(\r\n-                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                              children: <Widget>[\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n-                                                  icon: \"‚åò\",\r\n-                                                ),\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n-                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.altRight),\r\n-                                                  icon: \"‚å•\",\r\n-                                                ),\r\n-                                              ],\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                  ],\r\n-                                ),\r\n-                              ] else ...<Widget>[\r\n-                                FittedBox(\r\n-                                  fit: BoxFit.scaleDown,\r\n-                                  child: Column(\r\n-                                    children: <Widget>[\r\n-                                      Text(\r\n-                                        \"Flutter Key Code\",\r\n-                                        style: TextStyle(\r\n-                                          color: Colors.black,\r\n-                                          fontSize: normalTextSize,\r\n-                                        ),\r\n-                                      ),\r\n-                                      SizedBox(height: spacingTextSize),\r\n-                                      Container(\r\n-                                        width: constraints.maxWidth * 0.45,\r\n-                                        height: constraints.maxHeight * 0.45,\r\n-                                        decoration: BoxDecoration(\r\n-                                          border: Border.all(color: Colors.grey[400]!),\r\n-                                          borderRadius: BorderRadius.circular(8.0),\r\n-                                        ),\r\n-                                        child: const Center(\r\n-                                          child: Text(\"Press a key on the keyboard!\"),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                              ],\r\n-                            ],\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                    if (hasCopied)\r\n-                      Positioned(\r\n-                        left: mousePosition.$1 + 16,\r\n-                        top: mousePosition.$2 + 8,\r\n-                        child: ClipboardMessage(\r\n-                          animationCallback: () => setState(() => hasCopied = false),\r\n-                        ),\r\n-                      ),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class Tile extends StatefulWidget {\r\n-  const Tile({\r\n-    required this.title,\r\n-    required this.child,\r\n-    this.description,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final String title;\r\n-  final Widget child;\r\n-  final String? description;\r\n-\r\n-  @override\r\n-  State<Tile> createState() => _TileState();\r\n-}\r\n-\r\n-class _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n-  late Animation<double> _scale;\r\n-  late final AnimationController _controller;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n-    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n-        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => MouseRegion(\r\n-        onEnter: (_) => _controller.forward(),\r\n-        onExit: (_) => _controller.reverse(),\r\n-        child: AnimatedBuilder(\r\n-          animation: _controller,\r\n-          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n-          child: Container(\r\n-            width: 225,\r\n-            height: 256,\r\n-            decoration: const BoxDecoration(\r\n-              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n-              color: Colors.black,\r\n-            ),\r\n-            child: Column(\r\n-              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-              children: <Widget>[\r\n-                Container(\r\n-                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n-                  color: Colors.blue,\r\n-                  child: Center(\r\n-                    child: Text(\r\n-                      widget.title,\r\n-                      style: const TextStyle(\r\n-                        color: Colors.white,\r\n-                        fontWeight: FontWeight.w500,\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-                Expanded(\r\n-                  child: ColoredBox(\r\n-                    color: Colors.white,\r\n-                    child: Center(child: widget.child),\r\n-                  ),\r\n-                ),\r\n-                if (widget.description != null)\r\n-                  Container(\r\n-                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n-                    padding: const EdgeInsets.all(8.0),\r\n-                    color: Colors.grey[200],\r\n-                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n-                  ),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-}\r\n-\r\n-class ModifierSquare extends StatelessWidget {\r\n-  const ModifierSquare({\r\n-    required this.isActivated,\r\n-    required this.icon,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final bool isActivated;\r\n-  final String icon;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => Container(\r\n-        width: 64,\r\n-        height: 64,\r\n-        decoration: BoxDecoration(\r\n-          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n-          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n-        ),\r\n-        child: Center(\r\n-          child: Text(\r\n-            icon,\r\n-            style: TextStyle(\r\n-              color: isActivated ? Colors.black : Colors.grey[200],\r\n-              fontSize: 36,\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-}\r\n-\r\n-class ClipboardMessage extends StatefulWidget {\r\n-  const ClipboardMessage({required this.animationCallback, super.key});\r\n-\r\n-  final void Function() animationCallback;\r\n-\r\n-  @override\r\n-  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n-}\r\n-\r\n-class _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n-  late final AnimationController _animationController;\r\n-  late final Animation<double> _opacity;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n-      ..addStatusListener((AnimationStatus status) {\r\n-        if (status case AnimationStatus.completed) {\r\n-          widget.animationCallback();\r\n-        }\r\n-      });\r\n-    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n-        .drive(\r\n-      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n-        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n-      ]),\r\n-    );\r\n-    _animationController.forward();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => AnimatedBuilder(\r\n-        animation: _animationController,\r\n-        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n-        child: const Text(\"Copied to clipboard!\"),\r\n-      );\r\n-}\r\n-import \"dart:async\";\r\n-import \"dart:io\";\r\n-\r\n-import \"package:flutter/foundation.dart\";\r\n-import \"package:flutter/material.dart\";\r\n-import \"package:flutter/services.dart\";\r\n-import \"package:window_manager/window_manager.dart\";\r\n-\r\n-void main() async {\r\n-  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n-    WidgetsFlutterBinding.ensureInitialized();\r\n-    await windowManager.ensureInitialized();\r\n-\r\n-    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n-    // await WindowManager.instance.setSize(const Size(400, 650));\r\n-  }\r\n-  runApp(const MainApp());\r\n-}\r\n-\r\n-class MainApp extends StatefulWidget {\r\n-  const MainApp({super.key});\r\n-\r\n-  @override\r\n-  State<MainApp> createState() => _MainAppState();\r\n-}\r\n-\r\n-class _MainAppState extends State<MainApp> {\r\n-  late final FocusNode focusNode;\r\n-  late final Set<LogicalKeyboardKey> active;\r\n-\r\n-  late bool hasCopied;\r\n-  late (double, double) mousePosition;\r\n-  KeyEvent? lastKeyEvent;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    hasCopied = false;\r\n-    mousePosition = (0.0, 0.0);\r\n-    focusNode = new FocusNode();\r\n-    active = <LogicalKeyboardKey>{};\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n-\r\n-    return MaterialApp(\r\n-      theme: ThemeData(\r\n-        useMaterial3: true,\r\n-      ),\r\n-      home: LayoutBuilder(\r\n-        builder: (BuildContext context, BoxConstraints constraints) {\r\n-          double normalTextSize = constraints.maxHeight * 0.045;\r\n-          double highlightTextSize = constraints.maxHeight * 0.20;\r\n-          double spacingTextSize = constraints.maxHeight * 0.035;\r\n-\r\n-          return KeyboardListener(\r\n-            autofocus: true,\r\n-            focusNode: focusNode,\r\n-            onKeyEvent: (KeyEvent event) {\r\n-              if (event case KeyUpEvent()) {\r\n-                setState(() {\r\n-                  active.remove(event.logicalKey);\r\n-                });\r\n-              } else if (event case KeyDownEvent()) {\r\n-                setState(() {\r\n-                  active.add(event.logicalKey);\r\n-                  this.lastKeyEvent = event;\r\n-                });\r\n-              }\r\n-            },\r\n-            child: Scaffold(\r\n-              body: MouseRegion(\r\n-                onHover: (PointerHoverEvent event) {\r\n-                  setState(() {\r\n-                    mousePosition = (event.position.dx, event.position.dy);\r\n-                  });\r\n-                },\r\n-                child: Stack(\r\n-                  children: <Widget>[\r\n-                    SingleChildScrollView(\r\n-                      child: Container(\r\n-                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n-                        child: SingleChildScrollView(\r\n-                          child: Column(\r\n-                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n-                            children: <Widget>[\r\n-                              if (lastKeyEvent != null) ...<Widget>[\r\n-                                FittedBox(\r\n-                                  fit: BoxFit.scaleDown,\r\n-                                  child: Column(\r\n-                                    children: <Widget>[\r\n-                                      RichText(\r\n-                                        text: TextSpan(\r\n-                                          children: <InlineSpan>[\r\n-                                            TextSpan(\r\n-                                              text: \"Flutter Key Code\",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \" \",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \"(logicalKey.keyId)\",\r\n-                                              style: TextStyle(\r\n-                                                fontFamily: \"Consolas\",\r\n-                                                color: Colors.grey,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: \" \",\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                            TextSpan(\r\n-                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n-                                              style: TextStyle(\r\n-                                                color: Colors.black,\r\n-                                                fontSize: normalTextSize,\r\n-                                              ),\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                      MouseRegion(\r\n-                                        cursor: SystemMouseCursors.click,\r\n-                                        child: GestureDetector(\r\n-                                          onTap: () {\r\n-                                            unawaited(\r\n-                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n-                                                  .then((_) => setState(() => hasCopied = true)),\r\n-                                            );\r\n-                                          },\r\n-                                          child: Text(\r\n-                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n-                                            style: TextStyle(fontSize: highlightTextSize),\r\n-                                          ),\r\n-                                        ),\r\n-                                      ),\r\n-                                      Text(\r\n-                                        lastKeyEvent.logicalKey.keyLabel,\r\n-                                        style: TextStyle(fontSize: normalTextSize),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                                SizedBox(height: spacingTextSize),\r\n-                                Center(\r\n-                                  child: Text(\r\n-                                    \"Keycode Information\",\r\n-                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n-                                  ),\r\n-                                ),\r\n-                                SizedBox(height: spacingTextSize),\r\n-                                Wrap(\r\n-                                  alignment: WrapAlignment.center,\r\n-                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n-                                  spacing: 16.0,\r\n-                                  runSpacing: 16.0,\r\n-                                  runAlignment: WrapAlignment.center,\r\n-                                  children: <Widget>[\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.keyId\",\r\n-                                      description:\r\n-                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.debugName\",\r\n-                                      description:\r\n-                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.isAutogenerated\",\r\n-                                      description:\r\n-                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"logicalKey.keyLabel\",\r\n-                                      description:\r\n-                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n-                                      child: Text(\r\n-                                        lastKeyEvent.logicalKey.keyLabel,\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"physicalKey.usbHidUsage\",\r\n-                                      description:\r\n-                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n-                                      child: Text(\r\n-                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n-                                        style: TextStyle(\r\n-                                          fontSize: constraints.maxHeight * 0.025,\r\n-                                          fontWeight: FontWeight.w600,\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                    Tile(\r\n-                                      title: \"Modifiers\",\r\n-                                      child: Center(\r\n-                                        child: Column(\r\n-                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                          children: <Widget>[\r\n-                                            Row(\r\n-                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                              children: <Widget>[\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n-                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n-                                                  icon: \"‚áß\",\r\n-                                                ),\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.control) ||\r\n-                                                      active.contains(LogicalKeyboardKey.controlLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.controlRight),\r\n-                                                  icon: \"^\",\r\n-                                                ),\r\n-                                              ],\r\n-                                            ),\r\n-                                            Row(\r\n-                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n-                                              children: <Widget>[\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n-                                                  icon: \"‚åò\",\r\n-                                                ),\r\n-                                                ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n-                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n-                                                      active.contains(LogicalKeyboardKey.altRight),\r\n-                                                  icon: \"‚å•\",\r\n-                                                ),\r\n-                                              ],\r\n-                                            ),\r\n-                                          ],\r\n-                                        ),\r\n-                                      ),\r\n-                                    ),\r\n-                                  ],\r\n-                                ),\r\n-                              ] else ...<Widget>[\r\n-                                FittedBox(\r\n-                                  fit: BoxFit.scaleDown,\r\n-                                  child: Column(\r\n-                                    children: <Widget>[\r\n-                                      Text(\r\n-                                        \"Flutter Key Code\",\r\n-                                        style: TextStyle(\r\n-                                          color: Colors.black,\r\n-                                          fontSize: normalTextSize,\r\n-                                        ),\r\n-                                      ),\r\n-                                      SizedBox(height: spacingTextSize),\r\n-                                      Container(\r\n-                                        width: constraints.maxWidth * 0.45,\r\n-                                        height: constraints.maxHeight * 0.45,\r\n-                                        decoration: BoxDecoration(\r\n-                                          border: Border.all(color: Colors.grey[400]!),\r\n-                                          borderRadius: BorderRadius.circular(8.0),\r\n-                                        ),\r\n-                                        child: const Center(\r\n-                                          child: Text(\"Press a key on the keyboard!\"),\r\n-                                        ),\r\n-                                      ),\r\n-                                    ],\r\n-                                  ),\r\n-                                ),\r\n-                              ],\r\n-                            ],\r\n-                          ),\r\n-                        ),\r\n-                      ),\r\n-                    ),\r\n-                    if (hasCopied)\r\n-                      Positioned(\r\n-                        left: mousePosition.$1 + 16,\r\n-                        top: mousePosition.$2 + 8,\r\n-                        child: ClipboardMessage(\r\n-                          animationCallback: () => setState(() => hasCopied = false),\r\n-                        ),\r\n-                      ),\r\n-                  ],\r\n-                ),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        },\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class Tile extends StatefulWidget {\r\n-  const Tile({\r\n-    required this.title,\r\n-    required this.child,\r\n-    this.description,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final String title;\r\n-  final Widget child;\r\n-  final String? description;\r\n-\r\n-  @override\r\n-  State<Tile> createState() => _TileState();\r\n-}\r\n-\r\n-class _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n-  late Animation<double> _scale;\r\n-  late final AnimationController _controller;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n-    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n-        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => MouseRegion(\r\n-        onEnter: (_) => setState(() {\r\n-_controller.forward();\r\n-        }),\r\n-        onExit: (_) => setState(() {\r\n-          _controller.reverse();\r\n-        }),\r\n-        child: AnimatedBuilder(\r\n-          animation: _controller,\r\n-          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n-          child: Container(\r\n-            width: 225,\r\n-            height: 256,\r\n-            decoration: const BoxDecoration(\r\n-              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n-              color: Colors.black,\r\n-            ),\r\n-            child: Column(\r\n-              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n-              children: <Widget>[\r\n-                Container(\r\n-                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n-                  color: Colors.blue,\r\n-                  child: Center(\r\n-                    child: Text(\r\n-                      widget.title,\r\n-                      style: const TextStyle(\r\n-                        color: Colors.white,\r\n-                        fontWeight: FontWeight.w500,\r\n-                      ),\r\n-                    ),\r\n-                  ),\r\n-                ),\r\n-                Expanded(\r\n-                  child: ColoredBox(\r\n-                    color: Colors.white,\r\n-                    child: Center(child: widget.child),\r\n-                  ),\r\n-                ),\r\n-                if (widget.description != null)\r\n-                  Container(\r\n-                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n-                    padding: const EdgeInsets.all(8.0),\r\n-                    color: Colors.grey[200],\r\n-                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n-                  ),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-}\r\n-\r\n-class ModifierSquare extends StatelessWidget {\r\n-  const ModifierSquare({\r\n-    required this.isActivated,\r\n-    required this.icon,\r\n-    super.key,\r\n-  });\r\n-\r\n-  final bool isActivated;\r\n-  final String icon;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => Container(\r\n-        width: 64,\r\n-        height: 64,\r\n-        decoration: BoxDecoration(\r\n-          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n-          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n-        ),\r\n-        child: Center(\r\n-          child: Text(\r\n-            icon,\r\n-            style: TextStyle(\r\n-              color: isActivated ? Colors.black : Colors.grey[200],\r\n-              fontSize: 36,\r\n-            ),\r\n-          ),\r\n-        ),\r\n-      );\r\n-}\r\n-\r\n-class ClipboardMessage extends StatefulWidget {\r\n-  const ClipboardMessage({required this.animationCallback, super.key});\r\n-\r\n-  final void Function() animationCallback;\r\n-\r\n-  @override\r\n-  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n-}\r\n-\r\n-class _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n-  late final AnimationController _animationController;\r\n-  late final Animation<double> _opacity;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-\r\n-    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n-      ..addStatusListener((AnimationStatus status) {\r\n-        if (status case AnimationStatus.completed) {\r\n-          widget.animationCallback();\r\n-        }\r\n-      });\r\n-    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n-        .drive(\r\n-      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n-        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n-      ]),\r\n-    );\r\n-    _animationController.forward();\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) => AnimatedBuilder(\r\n-        animation: _animationController,\r\n-        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n-        child: const Text(\"Copied to clipboard!\"),\r\n-      );\r\n-}\r\n"
                },
                {
                    "date": 1693702911378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,22 +246,22 @@\n                                                       active.contains(LogicalKeyboardKey.shiftRight),\r\n                                                   icon: \"‚áß\",\r\n                                                 ),\r\n                                                 ModifierSquare(\r\n-                                                  isActivated: active.contains(LogicalKeyboardKey.control),\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.control) ||\r\n+                                                      active.contains(LogicalKeyboardKey.controlLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.controlRight),\r\n                                                   icon: \"^\",\r\n                                                 ),\r\n                                               ],\r\n                                             ),\r\n                                             Row(\r\n                                               mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                                               children: <Widget>[\r\n                                                 ModifierSquare(\r\n-                                                  isActivated: <LogicalKeyboardKey>{\r\n-                                                    LogicalKeyboardKey.meta,\r\n-                                                    LogicalKeyboardKey.metaLeft,\r\n-                                                    LogicalKeyboardKey.metaRight,\r\n-                                                  }.any(active.contains),\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n                                                   icon: \"‚åò\",\r\n                                                 ),\r\n                                                 ModifierSquare(\r\n                                                   isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n@@ -463,9 +463,9 @@\n       });\r\n     _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n         .drive(\r\n       TweenSequence<double>(<TweenSequenceItem<double>>[\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.1),\r\n         TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n         TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n       ]),\r\n     );\r\n"
                },
                {
                    "date": 1693702941731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,11 +463,11 @@\n       });\r\n     _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n         .drive(\r\n       TweenSequence<double>(<TweenSequenceItem<double>>[\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.1),\r\n-        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n-        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.10),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.10),\r\n       ]),\r\n     );\r\n     _animationController.forward();\r\n   }\r\n"
                },
                {
                    "date": 1693703032966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import \"package:flutter/material.dart\";\r\n import \"package:flutter/services.dart\";\r\n import \"package:window_manager/window_manager.dart\";\r\n \r\n+\r\n void main() async {\r\n   if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n     WidgetsFlutterBinding.ensureInitialized();\r\n     await windowManager.ensureInitialized();\r\n@@ -464,9 +465,9 @@\n     _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n         .drive(\r\n       TweenSequence<double>(<TweenSequenceItem<double>>[\r\n         TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.10),\r\n-        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.80),\r\n         TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.10),\r\n       ]),\r\n     );\r\n     _animationController.forward();\r\n"
                },
                {
                    "date": 1693703105986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,484 @@\n+import \"dart:async\";\r\n+import \"dart:io\";\r\n+\r\n+import \"package:flutter/foundation.dart\";\r\n+import \"package:flutter/material.dart\";\r\n+import \"package:flutter/services.dart\";\r\n+import \"package:window_manager/window_manager.dart\";\r\n+\r\n+\r\n+extension type MyExtension(int i) {}\r\n+\r\n+void main() async {\r\n+  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n+    WidgetsFlutterBinding.ensureInitialized();\r\n+    await windowManager.ensureInitialized();\r\n+\r\n+    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n+    // await WindowManager.instance.setSize(const Size(400, 650));\r\n+  }\r\n+  runApp(const MainApp());\r\n+}\r\n+\r\n+class MainApp extends StatefulWidget {\r\n+  const MainApp({super.key});\r\n+\r\n+  @override\r\n+  State<MainApp> createState() => _MainAppState();\r\n+}\r\n+\r\n+class _MainAppState extends State<MainApp> {\r\n+  late final FocusNode focusNode;\r\n+  late final Set<LogicalKeyboardKey> active;\r\n+\r\n+  late bool hasCopied;\r\n+  late (double, double) mousePosition;\r\n+  KeyEvent? lastKeyEvent;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    hasCopied = false;\r\n+    mousePosition = (0.0, 0.0);\r\n+    focusNode = new FocusNode();\r\n+    active = <LogicalKeyboardKey>{};\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n+\r\n+    return MaterialApp(\r\n+      theme: ThemeData(\r\n+        useMaterial3: true,\r\n+      ),\r\n+      home: LayoutBuilder(\r\n+        builder: (BuildContext context, BoxConstraints constraints) {\r\n+          double normalTextSize = constraints.maxHeight * 0.045;\r\n+          double highlightTextSize = constraints.maxHeight * 0.20;\r\n+          double spacingTextSize = constraints.maxHeight * 0.035;\r\n+\r\n+          return KeyboardListener(\r\n+            autofocus: true,\r\n+            focusNode: focusNode,\r\n+            onKeyEvent: (KeyEvent event) {\r\n+              if (event case KeyUpEvent()) {\r\n+                setState(() {\r\n+                  active.remove(event.logicalKey);\r\n+                });\r\n+              } else if (event case KeyDownEvent()) {\r\n+                setState(() {\r\n+                  active.add(event.logicalKey);\r\n+                  this.lastKeyEvent = event;\r\n+                });\r\n+              }\r\n+            },\r\n+            child: Scaffold(\r\n+              body: MouseRegion(\r\n+                onHover: (PointerHoverEvent event) {\r\n+                  setState(() {\r\n+                    mousePosition = (event.position.dx, event.position.dy);\r\n+                  });\r\n+                },\r\n+                child: Stack(\r\n+                  children: <Widget>[\r\n+                    SingleChildScrollView(\r\n+                      child: Container(\r\n+                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n+                        child: SingleChildScrollView(\r\n+                          child: Column(\r\n+                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n+                            children: <Widget>[\r\n+                              if (lastKeyEvent != null) ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      RichText(\r\n+                                        text: TextSpan(\r\n+                                          children: <InlineSpan>[\r\n+                                            TextSpan(\r\n+                                              text: \"Flutter Key Code\",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \"(logicalKey.keyId)\",\r\n+                                              style: TextStyle(\r\n+                                                fontFamily: \"Consolas\",\r\n+                                                color: Colors.grey,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: \" \",\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                            TextSpan(\r\n+                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n+                                              style: TextStyle(\r\n+                                                color: Colors.black,\r\n+                                                fontSize: normalTextSize,\r\n+                                              ),\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                      MouseRegion(\r\n+                                        cursor: SystemMouseCursors.click,\r\n+                                        child: GestureDetector(\r\n+                                          onTap: () {\r\n+                                            unawaited(\r\n+                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n+                                                  .then((_) => setState(() => hasCopied = true)),\r\n+                                            );\r\n+                                          },\r\n+                                          child: Text(\r\n+                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                            style: TextStyle(fontSize: highlightTextSize),\r\n+                                          ),\r\n+                                        ),\r\n+                                      ),\r\n+                                      Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(fontSize: normalTextSize),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Center(\r\n+                                  child: Text(\r\n+                                    \"Keycode Information\",\r\n+                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n+                                  ),\r\n+                                ),\r\n+                                SizedBox(height: spacingTextSize),\r\n+                                Wrap(\r\n+                                  alignment: WrapAlignment.center,\r\n+                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n+                                  spacing: 16.0,\r\n+                                  runSpacing: 16.0,\r\n+                                  runAlignment: WrapAlignment.center,\r\n+                                  children: <Widget>[\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyId\",\r\n+                                      description:\r\n+                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.debugName\",\r\n+                                      description:\r\n+                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.isAutogenerated\",\r\n+                                      description:\r\n+                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"logicalKey.keyLabel\",\r\n+                                      description:\r\n+                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n+                                      child: Text(\r\n+                                        lastKeyEvent.logicalKey.keyLabel,\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"physicalKey.usbHidUsage\",\r\n+                                      description:\r\n+                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n+                                      child: Text(\r\n+                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n+                                        style: TextStyle(\r\n+                                          fontSize: constraints.maxHeight * 0.025,\r\n+                                          fontWeight: FontWeight.w600,\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                    Tile(\r\n+                                      title: \"Modifiers\",\r\n+                                      child: Center(\r\n+                                        child: Column(\r\n+                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                          children: <Widget>[\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n+                                                  icon: \"‚áß\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.control) ||\r\n+                                                      active.contains(LogicalKeyboardKey.controlLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.controlRight),\r\n+                                                  icon: \"^\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                            Row(\r\n+                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n+                                              children: <Widget>[\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n+                                                  icon: \"‚åò\",\r\n+                                                ),\r\n+                                                ModifierSquare(\r\n+                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n+                                                      active.contains(LogicalKeyboardKey.altRight),\r\n+                                                  icon: \"‚å•\",\r\n+                                                ),\r\n+                                              ],\r\n+                                            ),\r\n+                                          ],\r\n+                                        ),\r\n+                                      ),\r\n+                                    ),\r\n+                                  ],\r\n+                                ),\r\n+                              ] else ...<Widget>[\r\n+                                FittedBox(\r\n+                                  fit: BoxFit.scaleDown,\r\n+                                  child: Column(\r\n+                                    children: <Widget>[\r\n+                                      Text(\r\n+                                        \"Flutter Key Code\",\r\n+                                        style: TextStyle(\r\n+                                          color: Colors.black,\r\n+                                          fontSize: normalTextSize,\r\n+                                        ),\r\n+                                      ),\r\n+                                      SizedBox(height: spacingTextSize),\r\n+                                      Container(\r\n+                                        width: constraints.maxWidth * 0.45,\r\n+                                        height: constraints.maxHeight * 0.45,\r\n+                                        decoration: BoxDecoration(\r\n+                                          border: Border.all(color: Colors.grey[400]!),\r\n+                                          borderRadius: BorderRadius.circular(8.0),\r\n+                                        ),\r\n+                                        child: const Center(\r\n+                                          child: Text(\"Press a key on the keyboard!\"),\r\n+                                        ),\r\n+                                      ),\r\n+                                    ],\r\n+                                  ),\r\n+                                ),\r\n+                              ],\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n+                    ),\r\n+                    if (hasCopied)\r\n+                      Positioned(\r\n+                        left: mousePosition.$1 + 16,\r\n+                        top: mousePosition.$2 + 8,\r\n+                        child: ClipboardMessage(\r\n+                          animationCallback: () => setState(() => hasCopied = false),\r\n+                        ),\r\n+                      ),\r\n+                  ],\r\n+                ),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        },\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class Tile extends StatefulWidget {\r\n+  const Tile({\r\n+    required this.title,\r\n+    required this.child,\r\n+    this.description,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final String title;\r\n+  final Widget child;\r\n+  final String? description;\r\n+\r\n+  @override\r\n+  State<Tile> createState() => _TileState();\r\n+}\r\n+\r\n+class _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n+  late Animation<double> _scale;\r\n+  late final AnimationController _controller;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n+    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n+        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => MouseRegion(\r\n+        onEnter: (_) => _controller.forward(),\r\n+        onExit: (_) => _controller.reverse(),\r\n+        child: AnimatedBuilder(\r\n+          animation: _controller,\r\n+          builder: (BuildContext context, Widget? child) => Transform.scale(scale: _scale.value, child: child),\r\n+          child: Container(\r\n+            width: 225,\r\n+            height: 256,\r\n+            decoration: const BoxDecoration(\r\n+              borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n+              color: Colors.black,\r\n+            ),\r\n+            child: Column(\r\n+              mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n+              children: <Widget>[\r\n+                Container(\r\n+                  padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n+                  color: Colors.blue,\r\n+                  child: Center(\r\n+                    child: Text(\r\n+                      widget.title,\r\n+                      style: const TextStyle(\r\n+                        color: Colors.white,\r\n+                        fontWeight: FontWeight.w500,\r\n+                      ),\r\n+                    ),\r\n+                  ),\r\n+                ),\r\n+                Expanded(\r\n+                  child: ColoredBox(\r\n+                    color: Colors.white,\r\n+                    child: Center(child: widget.child),\r\n+                  ),\r\n+                ),\r\n+                if (widget.description != null)\r\n+                  Container(\r\n+                    constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    color: Colors.grey[200],\r\n+                    child: Text(widget.description!, overflow: TextOverflow.fade),\r\n+                  ),\r\n+              ],\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ModifierSquare extends StatelessWidget {\r\n+  const ModifierSquare({\r\n+    required this.isActivated,\r\n+    required this.icon,\r\n+    super.key,\r\n+  });\r\n+\r\n+  final bool isActivated;\r\n+  final String icon;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => Container(\r\n+        width: 64,\r\n+        height: 64,\r\n+        decoration: BoxDecoration(\r\n+          border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n+          borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n+        ),\r\n+        child: Center(\r\n+          child: Text(\r\n+            icon,\r\n+            style: TextStyle(\r\n+              color: isActivated ? Colors.black : Colors.grey[200],\r\n+              fontSize: 36,\r\n+            ),\r\n+          ),\r\n+        ),\r\n+      );\r\n+}\r\n+\r\n+class ClipboardMessage extends StatefulWidget {\r\n+  const ClipboardMessage({required this.animationCallback, super.key});\r\n+\r\n+  final void Function() animationCallback;\r\n+\r\n+  @override\r\n+  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n+}\r\n+\r\n+class _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n+  late final AnimationController _animationController;\r\n+  late final Animation<double> _opacity;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n+      ..addStatusListener((AnimationStatus status) {\r\n+        if (status case AnimationStatus.completed) {\r\n+          widget.animationCallback();\r\n+        }\r\n+      });\r\n+    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n+        .drive(\r\n+      TweenSequence<double>(<TweenSequenceItem<double>>[\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.10),\r\n+        TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.80),\r\n+        TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.10),\r\n+      ]),\r\n+    );\r\n+    _animationController.forward();\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) => AnimatedBuilder(\r\n+        animation: _animationController,\r\n+        builder: (BuildContext context, Widget? child) => Opacity(opacity: _opacity.value, child: child),\r\n+        child: const Text(\"Copied to clipboard!\"),\r\n+      );\r\n+}\r\n"
                },
                {
                    "date": 1693704061824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n \r\n extension type MyExtension(int i) {}\r\n \r\n void main() async {\r\n+  \r\n   if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n     WidgetsFlutterBinding.ensureInitialized();\r\n     await windowManager.ensureInitialized();\r\n \r\n"
                },
                {
                    "date": 1693713046393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,8 @@\n \r\n extension type MyExtension(int i) {}\r\n \r\n void main() async {\r\n-  MyExtension number = MyExtension(12);\r\n \r\n   print(number);\r\n \r\n   if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n"
                }
            ],
            "date": 1693664131091,
            "name": "Commit-0",
            "content": "import \"dart:async\";\r\nimport \"dart:io\";\r\n\r\nimport \"package:flutter/foundation.dart\";\r\nimport \"package:flutter/material.dart\";\r\nimport \"package:flutter/services.dart\";\r\nimport \"package:window_manager/window_manager.dart\";\r\n\r\nvoid main() async {\r\n  if (!kIsWeb && (Platform.isWindows || Platform.isLinux || Platform.isMacOS)) {\r\n    WidgetsFlutterBinding.ensureInitialized();\r\n    await windowManager.ensureInitialized();\r\n\r\n    await WindowManager.instance.setMinimumSize(const Size(600, 700));\r\n    // await WindowManager.instance.setSize(const Size(400, 650));\r\n  }\r\n  runApp(const MainApp());\r\n}\r\n\r\nclass MainApp extends StatefulWidget {\r\n  const MainApp({super.key});\r\n\r\n  @override\r\n  State<MainApp> createState() => _MainAppState();\r\n}\r\n\r\nclass _MainAppState extends State<MainApp> {\r\n  late final FocusNode focusNode;\r\n  late final Set<LogicalKeyboardKey> active;\r\n\r\n  late bool hasCopied;\r\n  late (double, double) mousePosition;\r\n  KeyEvent? lastKeyEvent;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    hasCopied = false;\r\n    mousePosition = (0.0, 0.0);\r\n    focusNode = new FocusNode();\r\n    active = <LogicalKeyboardKey>{};\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    KeyEvent? lastKeyEvent = this.lastKeyEvent;\r\n\r\n    return MaterialApp(\r\n      theme: ThemeData(\r\n        useMaterial3: true,\r\n      ),\r\n      home: LayoutBuilder(\r\n        builder: (BuildContext context, BoxConstraints constraints) {\r\n          final double normalTextSize = constraints.maxHeight * 0.045;\r\n          final double highlightTextSize = constraints.maxHeight * 0.20;\r\n          final double spacingTextSize = constraints.maxHeight * 0.035;\r\n\r\n          return KeyboardListener(\r\n            autofocus: true,\r\n            focusNode: focusNode,\r\n            onKeyEvent: (KeyEvent event) {\r\n              if (event case KeyUpEvent()) {\r\n                setState(() {\r\n                  active.remove(event.logicalKey);\r\n                });\r\n              } else if (event case KeyDownEvent()) {\r\n                setState(() {\r\n                  active.add(event.logicalKey);\r\n                  this.lastKeyEvent = event;\r\n                });\r\n              }\r\n            },\r\n            child: Scaffold(\r\n              body: MouseRegion(\r\n                onHover: (PointerHoverEvent event) {\r\n                  setState(() {\r\n                    mousePosition = (event.position.dx, event.position.dy);\r\n                  });\r\n                },\r\n                child: Stack(\r\n                  children: <Widget>[\r\n                    SingleChildScrollView(\r\n                      child: Container(\r\n                        margin: EdgeInsets.all(constraints.maxWidth * 0.05),\r\n                        child: SingleChildScrollView(\r\n                          child: Column(\r\n                            crossAxisAlignment: CrossAxisAlignment.stretch,\r\n                            children: <Widget>[\r\n                              if (lastKeyEvent != null) ...<Widget>[\r\n                                FittedBox(\r\n                                  fit: BoxFit.scaleDown,\r\n                                  child: Column(\r\n                                    children: <Widget>[\r\n                                      RichText(\r\n                                        text: TextSpan(\r\n                                          children: <InlineSpan>[\r\n                                            TextSpan(\r\n                                              text: \"Flutter Key Code\",\r\n                                              style: TextStyle(\r\n                                                color: Colors.black,\r\n                                                fontSize: normalTextSize,\r\n                                              ),\r\n                                            ),\r\n                                            TextSpan(\r\n                                              text: \" \",\r\n                                              style: TextStyle(\r\n                                                color: Colors.black,\r\n                                                fontSize: normalTextSize,\r\n                                              ),\r\n                                            ),\r\n                                            TextSpan(\r\n                                              text: \"(logicalKey.keyId)\",\r\n                                              style: TextStyle(\r\n                                                fontFamily: \"Consolas\",\r\n                                                color: Colors.grey,\r\n                                                fontSize: normalTextSize,\r\n                                              ),\r\n                                            ),\r\n                                            TextSpan(\r\n                                              text: \" \",\r\n                                              style: TextStyle(\r\n                                                color: Colors.black,\r\n                                                fontSize: normalTextSize,\r\n                                              ),\r\n                                            ),\r\n                                            TextSpan(\r\n                                              text: lastKeyEvent.logicalKey.keyId.toString(),\r\n                                              style: TextStyle(\r\n                                                color: Colors.black,\r\n                                                fontSize: normalTextSize,\r\n                                              ),\r\n                                            ),\r\n                                          ],\r\n                                        ),\r\n                                      ),\r\n                                      MouseRegion(\r\n                                        cursor: SystemMouseCursors.click,\r\n                                        child: GestureDetector(\r\n                                          onTap: () {\r\n                                            unawaited(\r\n                                              Clipboard.setData(ClipboardData(text: \"${lastKeyEvent.logicalKey.keyId}\"))\r\n                                                  .then((_) => setState(() => hasCopied = true)),\r\n                                            );\r\n                                          },\r\n                                          child: Text(\r\n                                            \"${lastKeyEvent.logicalKey.keyId}\",\r\n                                            style: TextStyle(fontSize: highlightTextSize),\r\n                                          ),\r\n                                        ),\r\n                                      ),\r\n                                      Text(\r\n                                        lastKeyEvent.logicalKey.keyLabel,\r\n                                        style: TextStyle(fontSize: normalTextSize),\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                                SizedBox(height: spacingTextSize),\r\n                                Center(\r\n                                  child: Text(\r\n                                    \"Keycode Information\",\r\n                                    style: TextStyle(fontSize: constraints.maxHeight * 0.025),\r\n                                  ),\r\n                                ),\r\n                                SizedBox(height: spacingTextSize),\r\n                                Wrap(\r\n                                  alignment: WrapAlignment.center,\r\n                                  crossAxisAlignment: WrapCrossAlignment.center,\r\n                                  spacing: 16.0,\r\n                                  runSpacing: 16.0,\r\n                                  runAlignment: WrapAlignment.center,\r\n                                  children: <Widget>[\r\n                                    Tile(\r\n                                      title: \"logicalKey.keyId\",\r\n                                      description:\r\n                                          \"This is an opaque code. It should not be unpacked to derive information from it, as the representation of the code could change at any time.\",\r\n                                      child: Text(\r\n                                        \"${lastKeyEvent.logicalKey.keyId}\",\r\n                                        style: TextStyle(\r\n                                          fontSize: constraints.maxHeight * 0.025,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Tile(\r\n                                      title: \"logicalKey.debugName\",\r\n                                      description:\r\n                                          \"The debug string to print for this keyboard key, which will be null in release mode.\",\r\n                                      child: Text(\r\n                                        \"${lastKeyEvent.logicalKey.debugName}\",\r\n                                        style: TextStyle(\r\n                                          fontSize: constraints.maxHeight * 0.025,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Tile(\r\n                                      title: \"logicalKey.isAutogenerated\",\r\n                                      description:\r\n                                          \"Auto-generated key IDs are generated in response to platform key codes which Flutter doesn't recognize, and their IDs shouldn't be used in a persistent way.\",\r\n                                      child: Text(\r\n                                        \"${lastKeyEvent.logicalKey.isAutogenerated}\",\r\n                                        style: TextStyle(\r\n                                          fontSize: constraints.maxHeight * 0.025,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Tile(\r\n                                      title: \"logicalKey.keyLabel\",\r\n                                      description:\r\n                                          \"This value is useful for providing readable strings for keys or keyboard shortcuts. Do not use this value to compare equality of keys; compare [keyId] instead.\",\r\n                                      child: Text(\r\n                                        lastKeyEvent.logicalKey.keyLabel,\r\n                                        style: TextStyle(\r\n                                          fontSize: constraints.maxHeight * 0.025,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Tile(\r\n                                      title: \"physicalKey.usbHidUsage\",\r\n                                      description:\r\n                                          \"The unique USB HID usage ID of this physical key on the keyboard. May not be the actual HID usage code from the hardware.\",\r\n                                      child: Text(\r\n                                        \"${lastKeyEvent.physicalKey.usbHidUsage}\",\r\n                                        style: TextStyle(\r\n                                          fontSize: constraints.maxHeight * 0.025,\r\n                                          fontWeight: FontWeight.w600,\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                    Tile(\r\n                                      title: \"Modifiers\",\r\n                                      child: Center(\r\n                                        child: Column(\r\n                                          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                                          children: <Widget>[\r\n                                            Row(\r\n                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                                              children: <Widget>[\r\n                                                ModifierSquare(\r\n                                                  isActivated: active.contains(LogicalKeyboardKey.shift) ||\r\n                                                      active.contains(LogicalKeyboardKey.shiftLeft) ||\r\n                                                      active.contains(LogicalKeyboardKey.shiftRight),\r\n                                                  icon: \"‚áß\",\r\n                                                ),\r\n                                                ModifierSquare(\r\n                                                  isActivated: active.contains(LogicalKeyboardKey.control) ||\r\n                                                      active.contains(LogicalKeyboardKey.controlLeft) ||\r\n                                                      active.contains(LogicalKeyboardKey.controlRight),\r\n                                                  icon: \"^\",\r\n                                                ),\r\n                                              ],\r\n                                            ),\r\n                                            Row(\r\n                                              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\r\n                                              children: <Widget>[\r\n                                                ModifierSquare(\r\n                                                  isActivated: active.contains(LogicalKeyboardKey.meta) ||\r\n                                                      active.contains(LogicalKeyboardKey.metaLeft) ||\r\n                                                      active.contains(LogicalKeyboardKey.metaRight),\r\n                                                  icon: \"‚åò\",\r\n                                                ),\r\n                                                ModifierSquare(\r\n                                                  isActivated: active.contains(LogicalKeyboardKey.alt) ||\r\n                                                      active.contains(LogicalKeyboardKey.altLeft) ||\r\n                                                      active.contains(LogicalKeyboardKey.altRight),\r\n                                                  icon: \"‚å•\",\r\n                                                ),\r\n                                              ],\r\n                                            )\r\n                                          ],\r\n                                        ),\r\n                                      ),\r\n                                    ),\r\n                                  ],\r\n                                ),\r\n                              ] else ...<Widget>[\r\n                                FittedBox(\r\n                                  fit: BoxFit.scaleDown,\r\n                                  child: Column(\r\n                                    children: <Widget>[\r\n                                      Text(\r\n                                        \"Flutter Key Code\",\r\n                                        style: TextStyle(\r\n                                          color: Colors.black,\r\n                                          fontSize: normalTextSize,\r\n                                        ),\r\n                                      ),\r\n                                      SizedBox(height: spacingTextSize),\r\n                                      Container(\r\n                                        width: constraints.maxWidth * 0.45,\r\n                                        height: constraints.maxHeight * 0.45,\r\n                                        decoration: BoxDecoration(\r\n                                          border: Border.all(color: Colors.grey[400]!),\r\n                                          borderRadius: BorderRadius.circular(8.0),\r\n                                        ),\r\n                                        child: const Center(\r\n                                          child: Text(\"Press a key on the keyboard!\"),\r\n                                        ),\r\n                                      ),\r\n                                    ],\r\n                                  ),\r\n                                ),\r\n                              ],\r\n                            ],\r\n                          ),\r\n                        ),\r\n                      ),\r\n                    ),\r\n                    if (hasCopied)\r\n                      Positioned(\r\n                        left: mousePosition.$1 + 16,\r\n                        top: mousePosition.$2 + 8,\r\n                        child: ClipboardMessage(\r\n                          animationCallback: () => setState(() => hasCopied = false),\r\n                        ),\r\n                      ),\r\n                  ],\r\n                ),\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass Tile extends StatefulWidget {\r\n  const Tile({\r\n    required this.title,\r\n    required this.child,\r\n    this.description,\r\n    super.key,\r\n  });\r\n\r\n  final String title;\r\n  final Widget child;\r\n  final String? description;\r\n\r\n  @override\r\n  State<Tile> createState() => _TileState();\r\n}\r\n\r\nclass _TileState extends State<Tile> with SingleTickerProviderStateMixin {\r\n  late Animation<double> _scale;\r\n  late final AnimationController _controller;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    _controller = new AnimationController(vsync: this, duration: const Duration(milliseconds: 200));\r\n    _scale = CurvedAnimation(parent: _controller, curve: Curves.ease) //\r\n        .drive(new Tween<double>(begin: 1, end: 1.0675));\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MouseRegion(\r\n      onEnter: (_) => setState(() {\r\n        _controller.forward();\r\n      }),\r\n      onExit: (_) => setState(() {\r\n        _controller.reverse();\r\n      }),\r\n      child: AnimatedBuilder(\r\n        animation: _controller,\r\n        builder: (BuildContext context, Widget? child) {\r\n          return Transform.scale(scale: _scale.value, child: child);\r\n        },\r\n        child: Container(\r\n          width: 225,\r\n          height: 256,\r\n          decoration: const BoxDecoration(\r\n            borderRadius: BorderRadius.all(Radius.circular(4.0)),\r\n            color: Colors.black,\r\n          ),\r\n          child: Column(\r\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n            children: <Widget>[\r\n              Container(\r\n                padding: const EdgeInsets.symmetric(vertical: 12.0),\r\n                color: Colors.blue,\r\n                child: Center(\r\n                  child: Text(\r\n                    widget.title,\r\n                    style: const TextStyle(\r\n                      color: Colors.white,\r\n                      fontWeight: FontWeight.w500,\r\n                    ),\r\n                  ),\r\n                ),\r\n              ),\r\n              Expanded(\r\n                child: ColoredBox(\r\n                  color: Colors.white,\r\n                  child: Center(child: widget.child),\r\n                ),\r\n              ),\r\n              if (widget.description != null)\r\n                Container(\r\n                  constraints: BoxConstraints.loose(const Size(double.infinity, 256)),\r\n                  padding: const EdgeInsets.all(8.0),\r\n                  color: Colors.grey[200],\r\n                  child: Text(widget.description!, overflow: TextOverflow.fade),\r\n                ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ModifierSquare extends StatelessWidget {\r\n  const ModifierSquare({\r\n    required this.isActivated,\r\n    required this.icon,\r\n    super.key,\r\n  });\r\n\r\n  final bool isActivated;\r\n  final String icon;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Container(\r\n      width: 64,\r\n      height: 64,\r\n      decoration: BoxDecoration(\r\n        border: Border.all(color: isActivated ? Colors.black : Colors.grey[200]!, width: 4),\r\n        borderRadius: const BorderRadius.all(Radius.circular(12)),\r\n      ),\r\n      child: Center(\r\n        child: Text(\r\n          icon,\r\n          style: TextStyle(\r\n            color: isActivated ? Colors.black : Colors.grey[200],\r\n            fontSize: 36,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass ClipboardMessage extends StatefulWidget {\r\n  const ClipboardMessage({required this.animationCallback, super.key});\r\n\r\n  final void Function() animationCallback;\r\n\r\n  @override\r\n  State<ClipboardMessage> createState() => _ClipboardMessageState();\r\n}\r\n\r\nclass _ClipboardMessageState extends State<ClipboardMessage> with SingleTickerProviderStateMixin {\r\n  late final AnimationController _animationController;\r\n  late final Animation<double> _opacity;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n\r\n    _animationController = AnimationController(vsync: this, duration: const Duration(seconds: 2))\r\n      ..addStatusListener((AnimationStatus status) {\r\n        if (status case AnimationStatus.completed) {\r\n          widget.animationCallback();\r\n        }\r\n      });\r\n    _opacity = CurvedAnimation(parent: _animationController, curve: Curves.easeInOut) //\r\n        .drive(TweenSequence<double>(<TweenSequenceItem<double>>[\r\n      TweenSequenceItem<double>(tween: Tween<double>(begin: 0.0, end: 1.0), weight: 0.25),\r\n      TweenSequenceItem<double>(tween: ConstantTween<double>(1.0), weight: 0.50),\r\n      TweenSequenceItem<double>(tween: Tween<double>(begin: 1.0, end: 0.0), weight: 0.25),\r\n    ]));\r\n    _animationController.forward();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AnimatedBuilder(\r\n      animation: _animationController,\r\n      builder: (BuildContext context, Widget? child) {\r\n        return Opacity(opacity: _opacity.value, child: child);\r\n      },\r\n      child: const Text(\"Copied to clipboard!\"),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}